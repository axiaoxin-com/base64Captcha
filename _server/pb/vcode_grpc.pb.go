// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: vcode.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VcodeServiceClient is the client API for VcodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VcodeServiceClient interface {
	// 生成验证码
	Generate(ctx context.Context, in *GenerateReq, opts ...grpc.CallOption) (*GenerateRsp, error)
	// 校验验证码
	Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRsp, error)
	// 生成原始验证码
	GenRawCode(ctx context.Context, in *GenRawCodeReq, opts ...grpc.CallOption) (*GenerateRsp, error)
}

type vcodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVcodeServiceClient(cc grpc.ClientConnInterface) VcodeServiceClient {
	return &vcodeServiceClient{cc}
}

func (c *vcodeServiceClient) Generate(ctx context.Context, in *GenerateReq, opts ...grpc.CallOption) (*GenerateRsp, error) {
	out := new(GenerateRsp)
	err := c.cc.Invoke(ctx, "/pb.VcodeService/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vcodeServiceClient) Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRsp, error) {
	out := new(VerifyRsp)
	err := c.cc.Invoke(ctx, "/pb.VcodeService/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vcodeServiceClient) GenRawCode(ctx context.Context, in *GenRawCodeReq, opts ...grpc.CallOption) (*GenerateRsp, error) {
	out := new(GenerateRsp)
	err := c.cc.Invoke(ctx, "/pb.VcodeService/GenRawCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VcodeServiceServer is the server API for VcodeService service.
// All implementations must embed UnimplementedVcodeServiceServer
// for forward compatibility
type VcodeServiceServer interface {
	// 生成验证码
	Generate(context.Context, *GenerateReq) (*GenerateRsp, error)
	// 校验验证码
	Verify(context.Context, *VerifyReq) (*VerifyRsp, error)
	// 生成原始验证码
	GenRawCode(context.Context, *GenRawCodeReq) (*GenerateRsp, error)
	mustEmbedUnimplementedVcodeServiceServer()
}

// UnimplementedVcodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVcodeServiceServer struct {
}

func (UnimplementedVcodeServiceServer) Generate(context.Context, *GenerateReq) (*GenerateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedVcodeServiceServer) Verify(context.Context, *VerifyReq) (*VerifyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedVcodeServiceServer) GenRawCode(context.Context, *GenRawCodeReq) (*GenerateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenRawCode not implemented")
}
func (UnimplementedVcodeServiceServer) mustEmbedUnimplementedVcodeServiceServer() {}

// UnsafeVcodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VcodeServiceServer will
// result in compilation errors.
type UnsafeVcodeServiceServer interface {
	mustEmbedUnimplementedVcodeServiceServer()
}

func RegisterVcodeServiceServer(s grpc.ServiceRegistrar, srv VcodeServiceServer) {
	s.RegisterService(&VcodeService_ServiceDesc, srv)
}

func _VcodeService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VcodeServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VcodeService/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VcodeServiceServer).Generate(ctx, req.(*GenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VcodeService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VcodeServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VcodeService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VcodeServiceServer).Verify(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VcodeService_GenRawCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenRawCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VcodeServiceServer).GenRawCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VcodeService/GenRawCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VcodeServiceServer).GenRawCode(ctx, req.(*GenRawCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VcodeService_ServiceDesc is the grpc.ServiceDesc for VcodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VcodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VcodeService",
	HandlerType: (*VcodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _VcodeService_Generate_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _VcodeService_Verify_Handler,
		},
		{
			MethodName: "GenRawCode",
			Handler:    _VcodeService_GenRawCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vcode.proto",
}
